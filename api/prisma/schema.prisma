// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Defining models
model User {
  id         Int      @id @default(autoincrement()) @map("_id")
  email      String      @unique
  username   String      @unique
  password   String
  avatar     String?
  createdAt  DateTime    @default(now())

  listings       Listing[]
  savedListings  SavedListing[]
}

enum ListingType {
  stay
  rent
}

enum PropertyType {
  house
  apartment
  cabin
  villa
  other
}

model Listing {
  id           String        @id @default(uuid()) @map("_id")
  title        String
  price        Float
  images       String[]
  address      String
  city         String
  latitude     String
  longitude    String
  type         ListingType
  property     PropertyType
  guestsMin    Int           @default(1)
  guestsMax    Int           @default(1)
  createdAt    DateTime      @default(now())

  user         User          @relation(fields: [userId], references: [id])
  userId       Int

  listingDetail ListingDetail?
  savedListings SavedListing[]
}

model ListingDetail {
  id         String       @id @default(uuid()) @map("_id")
  description String
  utilities   String?
  pet         String?
  size        Int?
  bedroom     Int         @default(1)
  bathroom    Int         @default(1)

  amenities   Amenity[]   @relation("ListingAmenities")
  features    String[]
  roomTypes   RoomType[]  @relation("ListingRoomTypes")

  listing     Listing     @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId   String      @unique
}

model SavedListing {
  id         String   @id @default(uuid()) @map("_id")
  user       User     @relation(fields: [userId], references: [id])
  listing    Listing  @relation(fields: [listingId], references: [id])
  userId     Int
  listingId  String
  createdAt  DateTime @default(now())

  @@unique([userId, listingId])
}

model Amenity {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  icon      String
  listings  ListingDetail[]  @relation("ListingAmenities")
}

model RoomType {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  icon      String
  listings  ListingDetail[]  @relation("ListingRoomTypes")
}
